# syntax=docker/dockerfile:1
#
# Dockerfile.cloudflare - Alpine-based build for Cloudflare Containers
# Based on cargo-zigbuild approach for static linking and Cloudflare compatibility
#
# This Dockerfile uses Alpine Linux with cargo-zigbuild for cross-compilation
# to create minimal, statically linked binaries suitable for Cloudflare Containers

##########################################
## 1️⃣ Builder Stage (Alpine + Zig)    ##
##########################################

FROM rust:1-alpine AS build

# Set build-time arguments
ARG TARGETPLATFORM=linux/amd64

# Install Zig, build tools, and required dependencies
RUN apk add --no-cache \
    zig \
    build-base \
    musl-dev \
    openssl-dev \
    pkgconfig \
    protobuf-dev \
    libudev-dev \
    zlib-dev \
    clang \
    llvm

# Install cargo-zigbuild for cross-compilation
RUN cargo install cargo-zigbuild

# Add cargo bin to PATH
ENV PATH="/root/.cargo/bin:${PATH}"

WORKDIR /app

# Copy Cargo files first for layer caching
COPY Cargo.toml Cargo.lock ./

# Determine target and build dependencies
RUN case ${TARGETPLATFORM} in \
    "linux/amd64") RUST_TARGET="x86_64-unknown-linux-musl" ;; \
    "linux/arm64") RUST_TARGET="aarch64-unknown-linux-musl" ;; \
    esac && \
    rustup target add ${RUST_TARGET} && \
    mkdir -p src && \
    echo "fn main() {}" > src/main.rs && \
    cargo zigbuild --release --target ${RUST_TARGET}

# Copy actual source code
COPY crates/ ./crates/
COPY protocols/ ./protocols/

# Build the actual application binaries
RUN case ${TARGETPLATFORM} in \
    "linux/amd64") RUST_TARGET="x86_64-unknown-linux-musl" ;; \
    "linux/arm64") RUST_TARGET="aarch64-unknown-linux-musl" ;; \
    esac && \
    cargo zigbuild --release --target ${RUST_TARGET} \
    --package reev-agent \
    --package reev-api \
    --package reev-runner

##########################################
## 2️⃣ Runtime Stage (scratch)          ##
##########################################

FROM scratch

# Copy CA certificates for HTTPS (needed for curl/requests)
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the compiled binaries from the build stage
COPY --from=build /app/target/x86_64-unknown-linux-musl/release/reev-agent /reev-agent
COPY --from=build /app/target/x86_64-unknown-linux-musl/release/reev-api /reev-api
COPY --from=build /app/target/x86_64-unknown-linux-musl/release/reev-runner /reev-runner

# Expose the service ports
EXPOSE 8080 9090 9091

# Default entrypoint - can be overridden
ENTRYPOINT ["/reev-api"]
