id: 111-JUP-LEND-USDC
description: A benchmark for lending USDC on a DeFi platform, using real mainnet addresses compatible with surfpool.
tags: ["jupiter", "lending", "usdc", "surfpool"]

initial_state:
  # User's main wallet with SOL for transaction fees.
  - pubkey: "USER_WALLET_PUBKEY"
    owner: "11111111111111111111111111111111" # System Program
    lamports: 1000000000 # 1 SOL

  # User's Associated Token Account (ATA) for the REAL USDC mint.
  # This account will be created and funded by the test runner.
  # surfpool will fetch the mint account data from mainnet automatically.
  - pubkey: "USER_USDC_ATA"
    owner: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" # Token Program
    lamports: 2039280 # Rent
    data:
      mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
      owner: "USER_WALLET_PUBKEY"
      amount: "100000000" # 100 USDC

prompt: "Lend 100 USDC on Kamino via Jupiter."

ground_truth:
  final_state_assertions:
    # After lending 100 USDC, the user's token account balance should be 0.
    - type: TokenAccountBalance
      pubkey: "USER_USDC_ATA"
      expected: 0

  # The expected instruction is a placeholder. The actual instruction will be
  # dynamically generated by the Jupiter API, which is what we are testing.
  expected_instructions:
    - program_id: "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4" # Jupiter v6
      accounts:
        - pubkey: "USER_WALLET_PUBKEY"
          is_signer: true
          is_writable: true
        - pubkey: "USER_USDC_ATA"
          is_signer: false
          is_writable: true
      data: "..." # Placeholder for dynamic instruction data
