id: 100-JUP-SWAP-SOL-USDC
description: A benchmark to test a swap from native SOL to mock USDC using a simulated Jupiter V6 Swap interaction.
tags: ["jupiter", "swap", "sol", "usdc"]

initial_state:
  # User's main wallet with 2 SOL.
  - pubkey: "USER_WALLET_PUBKEY"
    owner: "11111111111111111111111111111111" # System Program
    lamports: 2000000000 # 2 SOL

  # A mock USDC mint to represent the output token.
  - pubkey: "MOCK_USDC_MINT"
    owner: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" # Token Program
    lamports: 1000000 # Rent
    mint_data:
      mint_authority: "USER_WALLET_PUBKEY"
      decimals: 6

  # User's Associated Token Account (ATA) for the mock USDC, starting with a zero balance.
  - pubkey: "USER_USDC_ATA"
    owner: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" # Token Program
    lamports: 2039280 # Rent
    data: '{"mint": "MOCK_USDC_MINT", "owner": "USER_WALLET_PUBKEY", "amount": 0}'

prompt: "Using Jupiter, swap 0.1 SOL for USDC. My wallet is USER_WALLET_PUBKEY and my USDC token account is USER_USDC_ATA."

ground_truth:
  final_state_assertions:
    # The exact final SOL balance is non-deterministic due to transaction fees.
    # We assert that the balance has decreased by at least 0.1 SOL (100,000,000 lamports).
    # A slightly larger amount is used to account for potential fees.
    - type: SolBalanceChange
      pubkey: "USER_WALLET_PUBKEY"
      expected_change_gte: -100005000

    # NOTE: The exact output amount of USDC is non-deterministic due to market price fluctuations.
    # A robust evaluation would require a more flexible assertion, like "TokenAccountBalanceGreaterThan".
    # For this benchmark, we will omit the token balance assertion and focus on the SOL balance change.

  # The expected instruction is complex and dynamically generated by the Jupiter API based on the best route.
  # This serves as a structural placeholder for what the agent should aim to produce.
  # The agent's primary task is to correctly call the Jupiter API and format the resulting instruction.
  expected_instruction:
    program_id: "JUP6Lz32e1SCn2ofVnJgKz4r2cAtH1iBF5x2Vv5M24a" # Jupiter V6 Swap Program
    accounts:
      - pubkey: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" # Token Program
        is_signer: false
        is_writable: false
      - pubkey: "USER_WALLET_PUBKEY" # User's wallet, the authority
        is_signer: true
        is_writable: true
      # ... A non-deterministic list of accounts for the specific swap route would follow ...
      # This typically includes source/destination token accounts, AMM pools, etc.
      - pubkey: "USER_USDC_ATA" # User's destination ATA
        is_signer: false
        is_writable: true
    # The instruction data is dynamically generated by the Jupiter API. This is a placeholder.
    data: "placeholder_for_jupiter_swap_data"
